20-12-13

1. 7장 Timer
 - Atmega의 타이머를 사용했을때와 크게 다르지 않아서 크게 어렵지 않았음
  - 다만 내부 레지스터를 잘 보야할것 같음
   
  2. 8장 Task
   - 프로세스(태스크)의 핵심은 Context와 스택주소 그리고 태스크 함수이다.
    - Context는 Cpu 레지스터의 상태이며
	 - 스택주소는 이 태스크가 할당받은 스택주소이고
	  - 함수는 이 태스크를 통해 해결하고자 하는 내용이 들어있는 함수이다.
	   - Kernel_task_init함수에서 KernelTaskContext_t 구조체를 Task Control Block처럼 전역으로 선언하지 않고 지역으로 선언하였다.
	      이유가 뭘까?
		     
		     KernelTaskContext_t 구조체의 존재 이유
			     -> 해당 태스크의 Context내용을 저장하기 위해서 존재(R0 ~ R14, spsr 등등)
		
	3. 9장 Scheduler
	 - 라운드 로빈 알고리즘	: 인덱스를 1씩 늘려가서 순서대로 컨택스트 스위칭을 진행
	  - 우선순위 알고리즘		: 말 그대로 우선순위를 두어 우선순위에 따라서 컨택스트 스위칭을 진행
	   
	  4. 10장 Context Switching
	   - 컨택스트 스위칭의 순서
	     1) 현재 실행중인 태스크의 Context 내용을 Stack에 저장
		   2) 다음에 실행할 태스크의 Task Control Block을 받아온다
		     3) Task Control Block의 Stack에 저장되어 있는 컨텍스트를 CPU레지스터에 복구
			   4) PC를 복구하여 실행위치 복구
			    - Context를 저장하고 복구할 때 __attribute__ ((naked))를 사용하였다. 이는 컴파일러에 의한 추가 작업을 하지 않는다는 뜻이다
																				( 스택백업, 복구 리턴관련 어셈블 자동생성 )
	 - Context를 저장할 때 lr의 값이 Context를 복구할 때 pc의 값이 된다.
	  - Context를 저장할 때 모두다 PUSH한 뒤 sp에 현재 sp의 값을 저장한다.
	   
	  * 현재 SP의 위치가 잘못된듯하다. Main함수가 계속해서 반복되는중
